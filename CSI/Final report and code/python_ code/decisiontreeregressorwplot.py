# -*- coding: utf-8 -*-
"""DecisionTreeRegressorwplot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xtbs1mbIEbMVhvr-pih7zV9u1pl403DS
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeRegressor

# Generate some sample data
X = np.linspace(-5, 5, num=100).reshape(-1, 1)
y = np.sin(X) + np.random.normal(0, 0.1, size=X.shape)

# Train the model
regressor = DecisionTreeRegressor(max_depth=3)
regressor.fit(X, y)

# Make a prediction
X_test = np.linspace(-5, 5, num=100).reshape(-1, 1)
y_pred = regressor.predict(X_test)

# Plot the data and the fitted curve
plt.scatter(X, y, color='black')
plt.plot(X_test, y_pred, color='blue', linewidth=3)
plt.show()

"""In this example, we first generated some sample data and trained a DecisionTreeRegressor model on it with a maximum depth of 3. We then made a prediction on a range of new input data X_test and plotted the data points and the fitted curve.

The fit method of the DecisionTreeRegressor class fits a decision tree to the input data X and target values y. The predict method computes the predicted output for new input data X_test using the decision tree learned during training. Finally, we use Matplotlib to create a scatter plot of the data points and a line plot of the predicted values for X_test. The decision tree model partitions the input space into regions and fits a constant value to each region, resulting in a piecewise-constant fitted curve.
"""